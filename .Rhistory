}
else {
gruppo[index] <-  0
}
}
data$Gruppo_C2 <- cumsum(gruppo)
data <- subset(data, select = -Derivata_C2)
#*C4
data$Derivata_C4  <- c(0, as.numeric(diff(data$HMI_IBatt_C4)) / as.numeric(diff(data$Timestamp)))
PeriodoC4         <- cumsum(c(0, diff(data$Timestamp) > 15))
# Contatore Gruppi
gruppo <- rep(0, length(data$Timestamp))
for (index in 2:(length(data$Timestamp))) {
if (data$Diversi[index] != 1
&& ((data$Derivata_C4[index] < 0 && data$ID_C4[index] != data$ID_C4[index-1]) || PeriodoC4[index] != PeriodoC4[index-1])) {
gruppo[index] <-  1
}
else {
gruppo[index] <-  0
}
}
data$Gruppo_C4 <- cumsum(gruppo)
data <- subset(data, select = -Derivata_C4)
#*C5
data$Derivata_C5  <- c(0, as.numeric(diff(data$HMI_IBatt_C5)) / as.numeric(diff(data$Timestamp)))
PeriodoC5        <- cumsum(c(0, diff(data$Timestamp) > 15))
# Contatore Gruppi
gruppo <- rep(0, length(data$Timestamp))
for (index in 2:(length(data$Timestamp))) {
if (data$Diversi[index] != 1
&& ((data$Derivata_C5[index] < 0 && data$ID_C5[index] != data$ID_C5[index-1]) || PeriodoC5[index] != PeriodoC5[index-1])) {
gruppo[index] <-  1
}
else {
gruppo[index] <-  0
}
}
data$Gruppo_C5 <- cumsum(gruppo)
data <- subset(data, select = -Derivata_C5)
#*C7
data$Derivata_C7  <- c(0, as.numeric(diff(data$HMI_IBatt_C7)) / as.numeric(diff(data$Timestamp)))
PeriodoC7       <- cumsum(c(0, diff(data$Timestamp) > 15))
# Contatore Gruppi
gruppo <- rep(0, length(data$Timestamp))
for (index in 2:(length(data$Timestamp))) {
if (data$Diversi[index] != 1
&& ((data$Derivata_C7[index] < 0 && data$ID_C7[index] != data$ID_C7[index-1]) || PeriodoC7[index] != PeriodoC7[index-1])) {
gruppo[index] <-  1
}
else {
gruppo[index] <-  0
}
}
data$Gruppo_C7 <- cumsum(gruppo)
data <- subset(data, select = -Derivata_C7)
#Aggiungiamo una colonna per controllare se i gruppi sono gli stessi per tutte le batterie
sum(ifelse(rowSums(data[, c("Gruppo_C2", "Gruppo_C4", "Gruppo_C5", "Gruppo_C7")] != data$Gruppo_C2) > 0, 1, 0))
View(data)
indices_da_copiare <- which(data$Diversi == 1)
data[indices_da_copiare, -1] <- data[(indices_da_copiare - 1), -1]
View(data)
indices_da_copiare <- which(data$Diversi == 1)
data[indices_da_copiare, -1] <- data[(indices_da_copiare - 1), -1]
View(data)
sum(indices_da_copiare == 108717)
indices_da_copiare
sum(data$Diversi == 1)
data <- readRDS("tr_13.rds")
data_POC_ID <- readRDS("tab_tr_13_POC_ID.rds") #colonna contenente i valori di ID per ogni POC
data$POC_ID <- data_POC_ID$POC_ID
data <- subset(data, select = -POC) #eliminazione colonna POC priva di ID
data$Timestamp <- as.POSIXct(data$Timestamp) # Modifichiamo il formato di Timestamp
data  <-  data[format(data$Timestamp, "%Y") == "2022", ]
# Rinomina la colonna relativa alla velocità
names(data)[names(data) == "_VEHICLE_SPEED"] <- "Speed"
data$Indice <- seq(1, dim(data)[1])
#! ------------------- Aggiungiamo le colonne ID in base al segno della corrente -------------------
data$ID_C2  <- ifelse(data$HMI_IBatt_C2 >= 0,   1,  -1)
data$ID_C4  <- ifelse(data$HMI_IBatt_C4 >= 0,   1,  -1)
data$ID_C5  <- ifelse(data$HMI_IBatt_C5 >= 0,   1,  -1)
data$ID_C7  <- ifelse(data$HMI_IBatt_C7 >= 0,   1,  -1)
# Aggiungiamo una colonna di segnalazione quando non c'è concordanza tra le fasi di carica/scarica delle diverse batterie
data$Diversi <- ifelse(rowSums(data[, c("ID_C2", "ID_C4", "ID_C5", "ID_C7")] != data$ID_C2) > 0, 1, 0)
View(data)
dim(data$Diversi)
size(data$Diversi)
sum(data$Diversi)
sum(data$Diversi == 1)
lenght(which(data$Diversi == 1))
dim(which(data$Diversi == 1))
length(which(data$Diversi == 1))
indices_da_copiare <- which(data$Diversi == 1)
indices_da_copiare <- which(data$Diversi == 1)
data[indices_da_copiare, -1] <- data[(indices_da_copiare - 1), -1]
sum(data$Diversi == 1)
View(data)
indices_da_copiare <- which(data$Diversi == 1)
sum(data$Diversi == 1)
length(which(data$Diversi == 1))
data[indices_da_copiare, -1] <- data[(indices_da_copiare - 1), -1]
indices_da_copiare <- which(data$Diversi == 1)
sum(data$Diversi == 1)
# Aggiungiamo una colonna di segnalazione quando non c'è concordanza tra le fasi di carica/scarica delle diverse batterie
data$Diversi <- ifelse(rowSums(data[, c("ID_C2", "ID_C4", "ID_C5", "ID_C7")] != data$ID_C2) > 0, 1, 0)
indices_da_copiare <- which(data$Diversi == 1)
data[indices_da_copiare, -1] <- data[(indices_da_copiare - 1), -1]
View(data)
View(data[766000:766200])
View(data[766000:766200,])
library(tidyverse)
library(dplyr)
library(ggplot2)
#load("my_workspace.RData")
#! ------------------- Leggiamo il Dataset e recuperiamo solo i dati del 2022 -------------------
data <- readRDS("tr_13.rds")
data_POC_ID <- readRDS("tab_tr_13_POC_ID.rds") #colonna contenente i valori di ID per ogni POC
data$POC_ID <- data_POC_ID$POC_ID
data <- subset(data, select = -POC) #eliminazione colonna POC priva di ID
data$Timestamp <- as.POSIXct(data$Timestamp) # Modifichiamo il formato di Timestamp
data  <-  data[format(data$Timestamp, "%Y") == "2022", ]
# Rinomina la colonna relativa alla velocità
names(data)[names(data) == "_VEHICLE_SPEED"] <- "Speed"
data$Indice <- seq(1, dim(data)[1])
#! ------------------- Aggiungiamo le colonne ID in base al segno della corrente -------------------
data$ID_C2  <- ifelse(data$HMI_IBatt_C2 >= 0,   1,  -1)
data$ID_C4  <- ifelse(data$HMI_IBatt_C4 >= 0,   1,  -1)
data$ID_C5  <- ifelse(data$HMI_IBatt_C5 >= 0,   1,  -1)
data$ID_C7  <- ifelse(data$HMI_IBatt_C7 >= 0,   1,  -1)
# Aggiungiamo una colonna di segnalazione quando non c'è concordanza tra le fasi di carica/scarica delle diverse batterie
data$Diversi <- ifelse(rowSums(data[, c("ID_C2", "ID_C4", "ID_C5", "ID_C7")] != data$ID_C2) > 0, 1, 0)
indices_da_copiare <- which(data$Diversi == 1)
data[indices_da_copiare, -1] <- data[(indices_da_copiare - 1), -1]
View(data)
sum(data$Diversi)
# Aggiungiamo una colonna di segnalazione quando non c'è concordanza tra le fasi di carica/scarica delle diverse batterie
data$Diversi <- ifelse(rowSums(data[, c("ID_C2", "ID_C4", "ID_C5", "ID_C7")] != data$ID_C2) > 0, 1, 0)
indices_da_copiare <- which(data$Diversi == 1)
data[indices_da_copiare, -1] <- data[(indices_da_copiare - 1), -1]
sum(data$Diversi)
# Aggiungiamo una colonna di segnalazione quando non c'è concordanza tra le fasi di carica/scarica delle diverse batterie
data$Diversi <- ifelse(rowSums(data[, c("ID_C2", "ID_C4", "ID_C5", "ID_C7")] != data$ID_C2) > 0, 1, 0)
indices_da_copiare <- which(data$Diversi == 1)
data[indices_da_copiare, -1] <- data[(indices_da_copiare - 1), -1]
sum(data$Diversi)
# Aggiungiamo una colonna di segnalazione quando non c'è concordanza tra le fasi di carica/scarica delle diverse batterie
data$Diversi <- ifelse(rowSums(data[, c("ID_C2", "ID_C4", "ID_C5", "ID_C7")] != data$ID_C2) > 0, 1, 0)
indices_da_copiare <- which(data$Diversi == 1)
data[indices_da_copiare, -1] <- data[(indices_da_copiare - 1), -1]
sum(data$Diversi)
# Aggiungiamo una colonna di segnalazione quando non c'è concordanza tra le fasi di carica/scarica delle diverse batterie
data$Diversi <- ifelse(rowSums(data[, c("ID_C2", "ID_C4", "ID_C5", "ID_C7")] != data$ID_C2) > 0, 1, 0)
indices_da_copiare <- which(data$Diversi == 1)
data[indices_da_copiare, -1] <- data[(indices_da_copiare - 1), -1]
sum(data$Diversi)
# Aggiungiamo una colonna di segnalazione quando non c'è concordanza tra le fasi di carica/scarica delle diverse batterie
data$Diversi <- ifelse(rowSums(data[, c("ID_C2", "ID_C4", "ID_C5", "ID_C7")] != data$ID_C2) > 0, 1, 0)
indices_da_copiare <- which(data$Diversi == 1)
data[indices_da_copiare, -1] <- data[(indices_da_copiare - 1), -1]
sum(data$Diversi)
# Aggiungiamo una colonna di segnalazione quando non c'è concordanza tra le fasi di carica/scarica delle diverse batterie
data$Diversi <- ifelse(rowSums(data[, c("ID_C2", "ID_C4", "ID_C5", "ID_C7")] != data$ID_C2) > 0, 1, 0)
indices_da_copiare <- which(data$Diversi == 1)
data[indices_da_copiare, -1] <- data[(indices_da_copiare - 1), -1]
sum(data$Diversi)
# Aggiungiamo una colonna di segnalazione quando non c'è concordanza tra le fasi di carica/scarica delle diverse batterie
data$Diversi <- ifelse(rowSums(data[, c("ID_C2", "ID_C4", "ID_C5", "ID_C7")] != data$ID_C2) > 0, 1, 0)
indices_da_copiare <- which(data$Diversi == 1)
data[indices_da_copiare, -1] <- data[(indices_da_copiare - 1), -1]
sum(data$Diversi)
print('Numero di osservazioni con ID diverso: %d', sum(data$Diversi))
while( i != 0) {
# Aggiungiamo una colonna di segnalazione quando non c'è concordanza tra le fasi di carica/scarica delle diverse batterie
data$Diversi <- ifelse(rowSums(data[, c("ID_C2", "ID_C4", "ID_C5", "ID_C7")] != data$ID_C2) > 0, 1, 0)
indices_da_copiare <- which(data$Diversi == 1)
data[indices_da_copiare, -1] <- data[(indices_da_copiare - 1), -1]
print(sprintf('Numero di osservazioni con ID diverso: %d', sum(data$Diversi)))
i <- sum(data$Diversi)
}
i <- 1
while( i != 0) {
# Aggiungiamo una colonna di segnalazione quando non c'è concordanza tra le fasi di carica/scarica delle diverse batterie
data$Diversi <- ifelse(rowSums(data[, c("ID_C2", "ID_C4", "ID_C5", "ID_C7")] != data$ID_C2) > 0, 1, 0)
indices_da_copiare <- which(data$Diversi == 1)
data[indices_da_copiare, -1] <- data[(indices_da_copiare - 1), -1]
print(sprintf('Numero di osservazioni con ID diverso: %d', sum(data$Diversi)))
i <- sum(data$Diversi)
}
View(data)
#*C2
data$Derivata_C2  <- c(0, as.numeric(diff(data$HMI_IBatt_C2)) / as.numeric(diff(data$Timestamp)))
PeriodoC2         <- cumsum(c(0, diff(data$Timestamp) > 15))
# Contatore Gruppi
gruppo <- rep(0, length(data$Timestamp))
for (index in 2:(length(data$Timestamp))) {
if (data$Diversi[index] != 1
&& ((data$Derivata_C2[index] < 0 && data$ID_C2[index] != data$ID_C2[index-1]) || PeriodoC2[index] != PeriodoC2[index-1])) {
gruppo[index] <-  1
}
else {
gruppo[index] <-  0
}
}
data$Gruppo_C2 <- cumsum(gruppo)
data <- subset(data, select = -Derivata_C2)
#*C4
data$Derivata_C4  <- c(0, as.numeric(diff(data$HMI_IBatt_C4)) / as.numeric(diff(data$Timestamp)))
PeriodoC4         <- cumsum(c(0, diff(data$Timestamp) > 15))
# Contatore Gruppi
gruppo <- rep(0, length(data$Timestamp))
for (index in 2:(length(data$Timestamp))) {
if (data$Diversi[index] != 1
&& ((data$Derivata_C4[index] < 0 && data$ID_C4[index] != data$ID_C4[index-1]) || PeriodoC4[index] != PeriodoC4[index-1])) {
gruppo[index] <-  1
}
else {
gruppo[index] <-  0
}
}
data$Gruppo_C4 <- cumsum(gruppo)
data <- subset(data, select = -Derivata_C4)
#*C5
data$Derivata_C5  <- c(0, as.numeric(diff(data$HMI_IBatt_C5)) / as.numeric(diff(data$Timestamp)))
PeriodoC5        <- cumsum(c(0, diff(data$Timestamp) > 15))
# Contatore Gruppi
gruppo <- rep(0, length(data$Timestamp))
for (index in 2:(length(data$Timestamp))) {
if (data$Diversi[index] != 1
&& ((data$Derivata_C5[index] < 0 && data$ID_C5[index] != data$ID_C5[index-1]) || PeriodoC5[index] != PeriodoC5[index-1])) {
gruppo[index] <-  1
}
else {
gruppo[index] <-  0
}
}
data$Gruppo_C5 <- cumsum(gruppo)
data <- subset(data, select = -Derivata_C5)
#*C7
data$Derivata_C7  <- c(0, as.numeric(diff(data$HMI_IBatt_C7)) / as.numeric(diff(data$Timestamp)))
PeriodoC7       <- cumsum(c(0, diff(data$Timestamp) > 15))
# Contatore Gruppi
gruppo <- rep(0, length(data$Timestamp))
for (index in 2:(length(data$Timestamp))) {
if (data$Diversi[index] != 1
&& ((data$Derivata_C7[index] < 0 && data$ID_C7[index] != data$ID_C7[index-1]) || PeriodoC7[index] != PeriodoC7[index-1])) {
gruppo[index] <-  1
}
else {
gruppo[index] <-  0
}
}
data$Gruppo_C7 <- cumsum(gruppo)
data <- subset(data, select = -Derivata_C7)
#Aggiungiamo una colonna per controllare se i gruppi sono gli stessi per tutte le batterie
sum(ifelse(rowSums(data[, c("Gruppo_C2", "Gruppo_C4", "Gruppo_C5", "Gruppo_C7")] != data$Gruppo_C2) > 0, 1, 0))
library(gridExtra)
# # Create a list to store ggplots
plot_list <- list()
install.packages("gridExtra")
library(gridExtra)
library(gridExtra)
# Create a list to store ggplots
plot_list <- list()
# Create a ggplot for each group in a loop
for (group in gruppi_buoni[1:100]) {
group_data <- data[data$Gruppo_C2 == group, ]
# Create ggplot for the current group
plot <- ggplot(data = group_data) +
geom_line(mapping = aes(x = Timestamp, y = HMI_IBatt_C2)) +
geom_hline(yintercept = 26.25, linetype = "dashed", color = "red") +
labs(title = num2str(group), x = "Time", y = "Ampere")
# Add the ggplot to the list
plot_list[[length(plot_list) + 1]] <- plot
}
View(data)
which(names(data) == "Gruppo_C2")
sum(ifelse(rowSums(data[, c("Gruppo_C2", "Gruppo_C4", "Gruppo_C5", "Gruppo_C7")] != data$Gruppo_C2) > 0, 1, 0))
data <- subset(data, select = -c(Gruppo_C4, Gruppo_C5, Gruppo_C7))
# Rinomina la colonna Gruppo_C2 con il nuovo nome Gruppo
names(data)[which(names(data) == "Gruppo_C2")] <- "Gruppo"
View(data)
#! Seleziono solo le cariche-scariche complete gruppo_buono <- rep(0, length(data$Timestamp) )
for (group in data$Gruppo) {
if (min(data[data$Gruppo_C2 == group, "HMI_IBatt_C2" ]) < 0 &&
max(data[data$Gruppo_C2 == group, "HMI_IBatt_(2" ]) > 0 ) {
gruppo_buono [group] <- 1;
}
}
#! Seleziono solo le cariche-scariche complete gruppo_buono <- rep(0, length(data$Timestamp) )
for (group in data$Gruppo) {
if (min(data[data$Gruppo == group, "HMI_IBatt_C2" ]) < 0 &&
max(data[data$Gruppo == group, "HMI_IBatt_C2" ]) > 0 ) {
gruppo_buono [group] <- 1;
}
}
#! Seleziono solo le cariche-scariche complete
gruppo_buono <- rep(0, length(data$Timestamp) )
for (group in data$Gruppo) {
if (min(data[data$Gruppo == group, "HMI_IBatt_C2" ]) < 0 &&
max(data[data$Gruppo == group, "HMI_IBatt_C2" ]) > 0 ) {
gruppo_buono [group] <- 1;
}
}
#! ------------------- Seleziono i gruppi buoni e provo qualche plot  -------------------
for (group in data$Gruppo) {
print(group)
}
#! ------------------- Seleziono i gruppi buoni e provo qualche plot  -------------------
for (group in seq(0, max(data$Gruppo)) ) {
print(group)
}
#! ------------------- Seleziono i gruppi buoni e provo qualche plot  -------------------
for (group in seq(0, max(data$Gruppo)) ) {
print(group)
}
#! ------------------- Seleziono i gruppi buoni e provo qualche plot  -------------------
for (group in seq(0, max(data$Gruppo)) ) {
if (min(data[data$Gruppo == group, "HMI_IBatt_C2" ]) < 0 &&
max(data[data$Gruppo == group, "HMI_IBatt_C2" ]) > 0 ) {
gruppo_buono [group] <- 1;
}
}
#! ------------------- Seleziono i gruppi buoni e provo qualche plot  -------------------
gruppo_buono <- rep(0, max(data$Gruppo) )
for (group in seq(0, max(data$Gruppo)) ) {
if (min(data[data$Gruppo == group, "HMI_IBatt_C2" ]) < 0 &&
max(data[data$Gruppo == group, "HMI_IBatt_C2" ]) > 0 ) {
gruppo_buono [group] <- 1;
}
}
gruppo_buono <- cumsum(gruppo_buono)
gruppo_buono <- rep(0, max(data$Gruppo) )
for (group in seq(0, max(data$Gruppo)) ) {
if (min(data[data$Gruppo == group, "HMI_IBatt_C2" ]) < 0 &&
max(data[data$Gruppo == group, "HMI_IBatt_C2" ]) > 0 ) {
gruppo_buono [group] <- 1;
}
}
sum(gruppo_buono)
which (group == 1)
which (gruppo_buono == 1)
library(gridExtra)
# Create a list to store ggplots
plot_list <- list()
# Create a ggplot for each group in a loop
for (group in gruppi_buoni[1:100]) {
group_data <- data[data$Gruppo_C2 == group, ]
# Create ggplot for the current group
plot <- ggplot(data = group_data) +
geom_line(mapping = aes(x = Timestamp, y = HMI_IBatt_C2)) +
geom_hline(yintercept = 26.25, linetype = "dashed", color = "red") +
labs(title = num2str(group), x = "Time", y = "Ampere")
# Add the ggplot to the list
plot_list[[length(plot_list) + 1]] <- plot
}
# Create a ggplot for each group in a loop
for (group in gruppo_buono[1:100]) {
group_data <- data[data$Gruppo_C2 == group, ]
# Create ggplot for the current group
plot <- ggplot(data = group_data) +
geom_line(mapping = aes(x = Timestamp, y = HMI_IBatt_C2)) +
geom_hline(yintercept = 26.25, linetype = "dashed", color = "red") +
labs(title = num2str(group), x = "Time", y = "Ampere")
# Add the ggplot to the list
plot_list[[length(plot_list) + 1]] <- plot
}
paste(group)
# Create a ggplot for each group in a loop
for (group in gruppo_buono[1:100]) {
group_data <- data[data$Gruppo == group, ]
# Create ggplot for the current group
plot <- ggplot(data = group_data) +
geom_line(mapping = aes(x = Timestamp, y = HMI_IBatt_C2)) +
geom_hline(yintercept = 26.25, linetype = "dashed", color = "red") +
labs(title = paste(group), x = "Time", y = "Ampere")
# Add the ggplot to the list
plot_list[[length(plot_list) + 1]] <- plot
}
# Arrange the plots in a grid
grid.arrange(grobs = plot_list, ncol = 10)
View(plot_list)
# Create a ggplot for each group in a loop
for (group in gruppo_buono[1:10]) {
group_data <- data[data$Gruppo == group, ]
# Create ggplot for the current group
plot <- ggplot(data = group_data) +
geom_line(mapping = aes(x = Timestamp, y = HMI_IBatt_C2)) +
geom_hline(yintercept = 26.25, linetype = "dashed", color = "red") +
labs(title = paste(group), x = "Time", y = "Ampere")
# Add the ggplot to the list
plot_list[[length(plot_list) + 1]] <- plot
}
# Arrange the plots in a grid
grid.arrange(grobs = plot_list, ncol = 2)
data$Gruppo == gruppi_buoni
data$Gruppo == c(19, 5)
data$Gruppo ==  5
?%in%
?in
library(tidyverse)
library(dplyr)
library(ggplot2)
data <- readRDS("battery_clean.rds")
View(data)
names(data)[names(data) == "Gruppo"] <- "Gruppi_vecchi"
diff(data$Gruppi_vecchi)
diff(data$Gruppi_vecchi)[1500:1600]
?diff
?dense_rank
data$Gruppo <- cumsum(ifelse(c(0, diff(data$Gruppi_vecchi)) == 0), 0, 1)
data$Gruppo <- cumsum(ifelse(c(0, diff(data$Gruppi_vecchi)) == 0, 0, 1))
View(data)
dim(dense_rank(data$Gruppi_vecchi))
length(dense_rank(data$Gruppi_vecchi))
data$Gruppo_ alessia <- dense_rank(data$Gruppi_vecchi))
data$Gruppo_alessia <- dense_rank(data$Gruppi_vecchi))
data$Gruppo_alessia <- dense_rank(data$Gruppi_vecchi)
avg(data$Gruppo - data$Gruppo_alessia)
sum(data$Gruppo - data$Gruppo_alessia)
data$Gruppo <- cumsum(ifelse(c(0, diff(data$Gruppi_vecchi)) == 0, 0, 1)) +1
sum(data$Gruppo - data$Gruppo_alessia)
data$Gruppo <- dense_rank(data$Gruppi_vecchi)
data <- subset(data, select = -Gruppo_alessia) #eliminazione colonna POC priva di ID
View(data)
data <- subset(data, select = -Diversi) #eliminazione colonna POC priva di ID
View(data)
data <- subset(data, select = -Indice)
data$Indice <- seq(1, dim(data)[1])
data <- data %>%
mutate(Indice = seq(1, n())) %>%
select(Timestamp, Indice, everything())
View(data)
data <- data %>%
group_by(Gruppo) %>%
mutate(second = as.numeric(Timestamp - min(Timestamp), units = "secs")) %>%
ungroup()
View(data)
data <- data %>%
group_by(Gruppo) %>%
mutate(second = as.numeric(Timestamp - min(Timestamp), units = "secs")) %>%
ungroup() %>%
select(Timestamp, second, everything())
View(data)
data <- data %>%
mutate(Indice = seq(1, n())) %>%
select(Timestamp, Indice, everything())
data <- data %>%
group_by(Gruppo) %>%
mutate(second = as.numeric(Timestamp - min(Timestamp), units = "secs")) %>%
ungroup() %>%
select(Timestamp, second, everything())
View(data)
max(data[data$gruppo == 1,"second"])
max(data[data$Gruppo == 1,"second"])
library(gridExtra)
# Funzione per generare un singolo ggplot per un gruppo
generate_plot <- function(group_data) {
ggplot(data = group_data, aes(x = Timestamp, y = HMI_IBatt_C2)) +
geom_line() +
geom_hline(yintercept = 26.25, linetype = "dashed", color = "red") +
labs(title = paste("Group", unique(group_data$Gruppo)), x = "Time", y = "Ampere") +
theme_minimal()  # Personalizza il tema se necessario
}
# Lista per memorizzare i ggplot
plot_list <- list()
# Creazione di ggplot per ciascun gruppo
for (group in 1:20) {
group_data <- data[data$Gruppo == group, ]
plot_list[[length(plot_list) + 1]] <- generate_plot(group_data)
}
# Organizza i ggplot in una griglia
grid.arrange(grobs = plot_list, ncol = 10)  # Modifica il numero di colonne se necessario
library(gridExtra)
# Funzione per generare un singolo ggplot per un gruppo
generate_plot <- function(group_data) {
ggplot(data = group_data, aes(x = second, y = HMI_IBatt_C2)) +
geom_line() +
geom_hline(yintercept = 26.25, linetype = "dashed", color = "red") +
labs(title = paste("Group", unique(group_data$Gruppo)), x = "Time", y = "Ampere") +
theme_minimal()  # Personalizza il tema se necessario
}
# Lista per memorizzare i ggplot
plot_list <- list()
# Creazione di ggplot per ciascun gruppo
for (group in 1:20) {
group_data <- data[data$Gruppo == group, ]
plot_list[[length(plot_list) + 1]] <- generate_plot(group_data)
}
# Organizza i ggplot in una griglia
grid.arrange(grobs = plot_list, ncol = 10)  # Modifica il numero di colonne se necessario
generate_plot(10)
generate_plot(data[data$Gruppo == 100, ])
generate_plot(data[data$Gruppo == 1300, ])
generate_plot(data[data$Gruppo == 1300, ])
generate_plot(data[data$Gruppo == 1302, ])
generate_plot(data[data$Gruppo == 13016, ])
generate_plot(data[data$Gruppo == 13016, ])
generate_plot(data[data$Gruppo == 1016, ])
view((data[data$Gruppo == 13016, ]))
# Funzione per generare un singolo ggplot per un gruppo
generate_plot <- function(group) {
group_data <- data[data$Gruppo == group, ])
group_data <- data[data$Gruppo == group, ]
# Funzione per generare un singolo ggplot per un gruppo
generate_plot <- function(group) {
group_data <- data[data$Gruppo == group, ]
ggplot(data = group_data, aes(x = second, y = HMI_IBatt_C2)) +
geom_line() +
geom_hline(yintercept = 26.25, linetype = "dashed", color = "red") +
labs(title = paste("Group", group), x = "Time", y = "Ampere") +
theme_minimal()  # Personalizza il tema se necessario
}
generate_plot(1)
